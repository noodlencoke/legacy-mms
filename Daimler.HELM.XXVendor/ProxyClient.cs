using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Daimler.HELM.MessageInterface.Impl
{
    // 
    // This source code was auto-generated by wsdl, Version=4.0.30319.33440.
    // 

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "SmsAgileServicePortSoapBinding", Namespace = "http://service.agile.ws.dahantc.com")]
    public partial class ISmsAgileServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback sendSmsOperationCompleted;

        private System.Threading.SendOrPostCallback sendSms1OperationCompleted;

        private System.Threading.SendOrPostCallback getDeliverOperationCompleted;

        private System.Threading.SendOrPostCallback getReportOperationCompleted;

        /// <remarks/>
        public ISmsAgileServiceService()
        {
            this.Url = "http://ws.3tong.net/services/smsAgile";
        }

        /// <remarks/>
        public event sendSmsCompletedEventHandler sendSmsCompleted;

        /// <remarks/>
        public event sendSms1CompletedEventHandler sendSms1Completed;

        /// <remarks/>
        public event getDeliverCompletedEventHandler getDeliverCompleted;

        /// <remarks/>
        public event getReportCompletedEventHandler getReportCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("sendSms", RequestNamespace = "http://service.agile.ws.dahantc.com", ResponseNamespace = "http://service.agile.ws.dahantc.com", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string sendSms(string account, string password, string mobiles, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] string[] contents, string msgId, string subCode, string sign)
        {
            object[] results = this.Invoke("sendSms", new object[] {
                    account,
                    password,
                    mobiles,
                    contents,
                    msgId,
                    subCode,
                    sign});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginsendSms(string account, string password, string mobiles, string[] contents, string msgId, string subCode, string sign, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("sendSms", new object[] {
                    account,
                    password,
                    mobiles,
                    contents,
                    msgId,
                    subCode,
                    sign}, callback, asyncState);
        }

        /// <remarks/>
        public string EndsendSms(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void sendSmsAsync(string account, string password, string mobiles, string[] contents, string msgId, string subCode, string sign)
        {
            this.sendSmsAsync(account, password, mobiles, contents, msgId, subCode, sign, null);
        }

        /// <remarks/>
        public void sendSmsAsync(string account, string password, string mobiles, string[] contents, string msgId, string subCode, string sign, object userState)
        {
            if ((this.sendSmsOperationCompleted == null))
            {
                this.sendSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSmsOperationCompleted);
            }
            this.InvokeAsync("sendSms", new object[] {
                    account,
                    password,
                    mobiles,
                    contents,
                    msgId,
                    subCode,
                    sign}, this.sendSmsOperationCompleted, userState);
        }

        private void OnsendSmsOperationCompleted(object arg)
        {
            if ((this.sendSmsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSmsCompleted(this, new sendSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName = "sendSms1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("sendSms", RequestElementName = "sendSms", RequestNamespace = "http://service.agile.ws.dahantc.com", ResponseElementName = "sendSmsResponse", ResponseNamespace = "http://service.agile.ws.dahantc.com", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string sendSms(string account, string password, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] string[] mobiles, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] string[] contents, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] string[] msgId, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] string[] subCode, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] string[] sign)
        {
            object[] results = this.Invoke("sendSms1", new object[] {
                    account,
                    password,
                    mobiles,
                    contents,
                    msgId,
                    subCode,
                    sign});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginsendSms1(string account, string password, string[] mobiles, string[] contents, string[] msgId, string[] subCode, string[] sign, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("sendSms1", new object[] {
                    account,
                    password,
                    mobiles,
                    contents,
                    msgId,
                    subCode,
                    sign}, callback, asyncState);
        }

        /// <remarks/>
        public string EndsendSms1(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void sendSms1Async(string account, string password, string[] mobiles, string[] contents, string[] msgId, string[] subCode, string[] sign)
        {
            this.sendSms1Async(account, password, mobiles, contents, msgId, subCode, sign, null);
        }

        /// <remarks/>
        public void sendSms1Async(string account, string password, string[] mobiles, string[] contents, string[] msgId, string[] subCode, string[] sign, object userState)
        {
            if ((this.sendSms1OperationCompleted == null))
            {
                this.sendSms1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSms1OperationCompleted);
            }
            this.InvokeAsync("sendSms1", new object[] {
                    account,
                    password,
                    mobiles,
                    contents,
                    msgId,
                    subCode,
                    sign}, this.sendSms1OperationCompleted, userState);
        }

        private void OnsendSms1OperationCompleted(object arg)
        {
            if ((this.sendSms1Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSms1Completed(this, new sendSms1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getDeliver", RequestNamespace = "http://service.agile.ws.dahantc.com", ResponseNamespace = "http://service.agile.ws.dahantc.com", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string getDeliver(string account, string password)
        {
            object[] results = this.Invoke("getDeliver", new object[] {
                    account,
                    password});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetDeliver(string account, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getDeliver", new object[] {
                    account,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetDeliver(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getDeliverAsync(string account, string password)
        {
            this.getDeliverAsync(account, password, null);
        }

        /// <remarks/>
        public void getDeliverAsync(string account, string password, object userState)
        {
            if ((this.getDeliverOperationCompleted == null))
            {
                this.getDeliverOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDeliverOperationCompleted);
            }
            this.InvokeAsync("getDeliver", new object[] {
                    account,
                    password}, this.getDeliverOperationCompleted, userState);
        }

        private void OngetDeliverOperationCompleted(object arg)
        {
            if ((this.getDeliverCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDeliverCompleted(this, new getDeliverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getReport", RequestNamespace = "http://service.agile.ws.dahantc.com", ResponseNamespace = "http://service.agile.ws.dahantc.com", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string getReport(string account, string password)
        {
            object[] results = this.Invoke("getReport", new object[] {
                    account,
                    password});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetReport(string account, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getReport", new object[] {
                    account,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetReport(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getReportAsync(string account, string password)
        {
            this.getReportAsync(account, password, null);
        }

        /// <remarks/>
        public void getReportAsync(string account, string password, object userState)
        {
            if ((this.getReportOperationCompleted == null))
            {
                this.getReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetReportOperationCompleted);
            }
            this.InvokeAsync("getReport", new object[] {
                    account,
                    password}, this.getReportOperationCompleted, userState);
        }

        private void OngetReportOperationCompleted(object arg)
        {
            if ((this.getReportCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getReportCompleted(this, new getReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void sendSmsCompletedEventHandler(object sender, sendSmsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendSmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal sendSmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void sendSms1CompletedEventHandler(object sender, sendSms1CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendSms1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal sendSms1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void getDeliverCompletedEventHandler(object sender, getDeliverCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDeliverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getDeliverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void getReportCompletedEventHandler(object sender, getReportCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "SmsService4XMLImplPortSoapBinding", Namespace = "http://service.ws.dahantc.com")]
    public partial class SmsService4XMLImplService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback balanceOperationCompleted;

        private System.Threading.SendOrPostCallback deliverOperationCompleted;

        private System.Threading.SendOrPostCallback submitOperationCompleted;

        private System.Threading.SendOrPostCallback reportOperationCompleted;

        private System.Threading.SendOrPostCallback keywordcheckOperationCompleted;

        private System.Threading.SendOrPostCallback blackListCheckOperationCompleted;

        /// <remarks/>
        public SmsService4XMLImplService()
        {
            this.Url = "http://ws.3tong.net/services/sms";
        }

        /// <remarks/>
        public event balanceCompletedEventHandler balanceCompleted;

        /// <remarks/>
        public event deliverCompletedEventHandler deliverCompleted;

        /// <remarks/>
        public event submitCompletedEventHandler submitCompleted;

        /// <remarks/>
        public event reportCompletedEventHandler reportCompleted;

        /// <remarks/>
        public event keywordcheckCompletedEventHandler keywordcheckCompleted;

        /// <remarks/>
        public event blackListCheckCompletedEventHandler blackListCheckCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("balance", RequestNamespace = "http://service.ws.dahantc.com", ResponseNamespace = "http://service.ws.dahantc.com", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string balance(string message)
        {
            object[] results = this.Invoke("balance", new object[] {
                    message});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Beginbalance(string message, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("balance", new object[] {
                    message}, callback, asyncState);
        }

        /// <remarks/>
        public string Endbalance(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void balanceAsync(string message)
        {
            this.balanceAsync(message, null);
        }

        /// <remarks/>
        public void balanceAsync(string message, object userState)
        {
            if ((this.balanceOperationCompleted == null))
            {
                this.balanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbalanceOperationCompleted);
            }
            this.InvokeAsync("balance", new object[] {
                    message}, this.balanceOperationCompleted, userState);
        }

        private void OnbalanceOperationCompleted(object arg)
        {
            if ((this.balanceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.balanceCompleted(this, new balanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("deliver", RequestNamespace = "http://service.ws.dahantc.com", ResponseNamespace = "http://service.ws.dahantc.com", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string deliver(string message)
        {
            object[] results = this.Invoke("deliver", new object[] {
                    message});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Begindeliver(string message, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("deliver", new object[] {
                    message}, callback, asyncState);
        }

        /// <remarks/>
        public string Enddeliver(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void deliverAsync(string message)
        {
            this.deliverAsync(message, null);
        }

        /// <remarks/>
        public void deliverAsync(string message, object userState)
        {
            if ((this.deliverOperationCompleted == null))
            {
                this.deliverOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeliverOperationCompleted);
            }
            this.InvokeAsync("deliver", new object[] {
                    message}, this.deliverOperationCompleted, userState);
        }

        private void OndeliverOperationCompleted(object arg)
        {
            if ((this.deliverCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deliverCompleted(this, new deliverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("submit", RequestNamespace = "http://service.ws.dahantc.com", ResponseNamespace = "http://service.ws.dahantc.com", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string submit(string message)
        {
            object[] results = this.Invoke("submit", new object[] {
                    message});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Beginsubmit(string message, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("submit", new object[] {
                    message}, callback, asyncState);
        }

        /// <remarks/>
        public string Endsubmit(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void submitAsync(string message)
        {
            this.submitAsync(message, null);
        }

        /// <remarks/>
        public void submitAsync(string message, object userState)
        {
            if ((this.submitOperationCompleted == null))
            {
                this.submitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsubmitOperationCompleted);
            }
            this.InvokeAsync("submit", new object[] {
                    message}, this.submitOperationCompleted, userState);
        }

        private void OnsubmitOperationCompleted(object arg)
        {
            if ((this.submitCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.submitCompleted(this, new submitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("report", RequestNamespace = "http://service.ws.dahantc.com", ResponseNamespace = "http://service.ws.dahantc.com", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string report(string message)
        {
            object[] results = this.Invoke("report", new object[] {
                    message});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Beginreport(string message, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("report", new object[] {
                    message}, callback, asyncState);
        }

        /// <remarks/>
        public string Endreport(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void reportAsync(string message)
        {
            this.reportAsync(message, null);
        }

        /// <remarks/>
        public void reportAsync(string message, object userState)
        {
            if ((this.reportOperationCompleted == null))
            {
                this.reportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreportOperationCompleted);
            }
            this.InvokeAsync("report", new object[] {
                    message}, this.reportOperationCompleted, userState);
        }

        private void OnreportOperationCompleted(object arg)
        {
            if ((this.reportCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.reportCompleted(this, new reportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("keywordcheck", RequestNamespace = "http://service.ws.dahantc.com", ResponseNamespace = "http://service.ws.dahantc.com", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string keywordcheck(string message)
        {
            object[] results = this.Invoke("keywordcheck", new object[] {
                    message});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Beginkeywordcheck(string message, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("keywordcheck", new object[] {
                    message}, callback, asyncState);
        }

        /// <remarks/>
        public string Endkeywordcheck(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void keywordcheckAsync(string message)
        {
            this.keywordcheckAsync(message, null);
        }

        /// <remarks/>
        public void keywordcheckAsync(string message, object userState)
        {
            if ((this.keywordcheckOperationCompleted == null))
            {
                this.keywordcheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnkeywordcheckOperationCompleted);
            }
            this.InvokeAsync("keywordcheck", new object[] {
                    message}, this.keywordcheckOperationCompleted, userState);
        }

        private void OnkeywordcheckOperationCompleted(object arg)
        {
            if ((this.keywordcheckCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.keywordcheckCompleted(this, new keywordcheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("blackListCheck", RequestNamespace = "http://service.ws.dahantc.com", ResponseNamespace = "http://service.ws.dahantc.com", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string blackListCheck(string message)
        {
            object[] results = this.Invoke("blackListCheck", new object[] {
                    message});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginblackListCheck(string message, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("blackListCheck", new object[] {
                    message}, callback, asyncState);
        }

        /// <remarks/>
        public string EndblackListCheck(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void blackListCheckAsync(string message)
        {
            this.blackListCheckAsync(message, null);
        }

        /// <remarks/>
        public void blackListCheckAsync(string message, object userState)
        {
            if ((this.blackListCheckOperationCompleted == null))
            {
                this.blackListCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnblackListCheckOperationCompleted);
            }
            this.InvokeAsync("blackListCheck", new object[] {
                    message}, this.blackListCheckOperationCompleted, userState);
        }

        private void OnblackListCheckOperationCompleted(object arg)
        {
            if ((this.blackListCheckCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.blackListCheckCompleted(this, new blackListCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void balanceCompletedEventHandler(object sender, balanceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class balanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal balanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void deliverCompletedEventHandler(object sender, deliverCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deliverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal deliverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void submitCompletedEventHandler(object sender, submitCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class submitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal submitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void reportCompletedEventHandler(object sender, reportCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class reportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal reportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void keywordcheckCompletedEventHandler(object sender, keywordcheckCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class keywordcheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal keywordcheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void blackListCheckCompletedEventHandler(object sender, blackListCheckCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class blackListCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal blackListCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
